#! /usr/bin/env perl

use lib 'lib';
use YAML qw(LoadFile);
use Try::Tiny;
use Data::Dumper;
use Getopt::Long;
use Pod::Usage;
use EV;
use AnyEvent::MQTT;
use AnyEvent;
use AnyEvent::Log;
use DBI;
use POSIX qw(strftime);
use strict;
use warnings;
use v5.10;

our $VERSION = '0.01';

# Processing of command line options
my $verbose;
my $help;


Getopt::Long::Configure('bundling');
GetOptions(
    'v|verbose'  => \$verbose,
    'V|version'  => sub { die "$0 - $VERSION\n" },
    'help|?'     => \$help,
) or pod2usage(-verbose => 0);

pod2usage(-verbose => 2) if $help;

$AnyEvent::Log::FILTER->level("info") if $verbose;

AE::log 'info' => "Working directory: " . `pwd`;

# Processing of the configuration file
my $config_file = shift;
unless (defined $config_file && -r $config_file) {
    pod2usage(
        -message => "A configuration file is required",
        -verbose => 1, 
        -exitval => 1,
    );
    AE::log 'error'
        => 'A configuration file is either missing or cannot be read';
}

my $config;
try { 
    AE::log 'info' => "Loading configuration file from $config_file";
    $config = LoadFile($config_file);
}
catch {
    pod2usage(
        -message  => "Parsing of the configuration file failed: $_",
        -exitval  => 1,
        -verbose  => 99,
        -sections => "CONFIGURATION FILE",
    );
    AE::log error => "Parsing of the configuration file failed: $_";
};

# Connect to the MQTT broker
my $mqtt;
try {
    my $c = $config->{Broker};
    AE::log(
        fatal => "Broker section is missing from the configuration file"
    ) unless defined $c;
    $mqtt = AnyEvent::MQTT->new(%$c);
    AE::log 'info' => 'Connecting to broker at <' . $c->{host} .'>';
}
catch {
    pod2usage(
        -message  => "Connection to the MQTT broker failed: $_",
        -exitval  => 1,
        -verbose  => 99,
        -sections => "CONFIGURATION FILE/MQTT broker",
    );
    AE::log error => "Connection to the MQTT broker failed: $_";
};

# Connect to the database
my $dbh;
try {
    my $c      = $config->{Database};
    my $drv    = $c->{driver}     || die "Database driver is missing";
    my $dbname = $c->{DBname}     || die "DBname is missing";
    my $acomm  = $c->{autoCommit} // 1;
    AE::log 'info' => "Connecting to <$drv> database <$dbname>";
    
    $dbh = DBI->connect(
        "dbi:$drv:dbname=$dbname", 
        $c->{user}, 
        $c->{password},
        { AutoCommit => $acomm, RaiseError => 1 })
        || AE::log 'fatal' 
            =>  "Could not connect to the database: $DBI::errstr";
}
catch {
    pod2usage(
        -message  => "Connection to the database failed: $_",
        -exitval  => 1,
        -verbose  => 99,
        -sections => "CONFIGURATION FILE/Database",
    );
    AE::log error => "Connection to the database failed: $_";
};

# Process list of topics
foreach my $conv (@{$config->{Topics}}) {
	my ($nam) = keys %$conv;
    my ($def) = values %$conv;

    AE::log 'info' => "Setting up conversation <$nam>";
    
    try {
		# Load the class that should process the current topic
		my $class;
        if ($def->{'handler'}) {
            $class = "Machine::DB::Handler::" . $def->{'handler'};
        }
        else {
            $class = 'Machine::DB::Handler';
        }

		AE::log 'info' => "Loading $class for conversation <$nam>";
		eval "require $class";
		AE::log 'fatal' =>  "Error loading class <$class>: $@"
			if $@;

        AE::log 'info' => "Instantiating handler for <$nam>"; 
		$def->{'topic name'} = $nam;
        my $handler = $class->new($def);
		
		AE::log 'info' 
            =>  "Subscribing to conversation <$nam> with topic <"
                . $handler->subscription_topic . ">";
		my $s = $mqtt->subscribe(
			topic    => $handler->subscription_topic,
			callback => $handler->subscription_callback($dbh, $mqtt)
		);
		$s->recv;
	}
	catch {
		AE::log 'fatal' => "Failed setting up conversation <$nam>: $_";
	};
}

# If the database is not in auto-commit mode, commit every
my $commit_timer;
if (!$config->{Database}{autoCommit}) {
	$commit_timer = AnyEvent->timer( 
        after    => $config->{Database}{'commit every'} || 10,
		interval => $config->{Database}{'commit every'} || 10,
		cb       => sub { 
			$dbh->commit;
		}
	);
}

my $cv = AnyEvent->condvar;

# Falta agregar tratamiento de senales (stop, restart)
my $w = AnyEvent->signal(
    signal => 'HUP',
    cb     => sub { $cv->send }
);

# Enter the async loop. Disconnect from the database before exiting.
AE::log 'info' => "Entering asynchronous loop";
$cv->recv;

AE::log 'info' => "Disconnecting from the database";
$dbh->disconnect;
$mqtt->cleanup;
AE::log 'info' => "Exiting";
exit 0;

=pod

=head1 NAME

mqtt2bd - Simple database interaction through MQTT messages

=head1 SYNOPSIS

 mqtt2db [options] config_file.yml
 
 Options:
 
 v, verbose     Turn on notice messages
 V, version     Show program version and exit
 ?, help        Show the documentation and exit
 
 See the documentation for the description of the configuration file.

=head1 DESCRIPTION

This program implements a MQTT-based interface to a database. In order to work, it subscribes to a list of MQTT topics defined in its configuration file. Each topic may define one or more SQL statements to execute on the database and possibly, the definition of a response MQTT message.

The program parses incoming messages (both the topic and the body of the message) looking for the value of pre-defined fields. These fields are then stored in a sort of clipboard, the fields hash. SQL statements take their parameters from this fields hash and they put their results back in it as well. Finally, if there is a response, it may take fields from the hash and send these field values back in the message topic or body.

Please note that this program is able to retrieve a single row of data from the database.

=head1 CONFIGURATION

The configuration file is in YAML. There is an example configuration file in this distribution. You can find the YAML specification here: L<http://yaml.org/spec/1.0/>.

It requires the following top-level sections: 

=head2 MQTT broker

This section defines the connection parameters for the MQTT broker. These come from L<AnyEvent::MQTT>; the contents of this section are passed as-is to the constructor. The most common are:

=over

=item * host - IP address of the broker. It is 'localhost' by default.

=item * port - Port the broker is listening to. Defaults to 1883.

=item * timeout - Timeout for response from the server. 

=item * user_name - User name for the broker.

=item * password - Password for the broker.

=item * will_topic, will_message, will_qos, will_retain - Define the message that is sent when this program disconnects from the broker.

=back

The example configuration file includes:

 Broker:
    host: localhost
    will_topic: mqtt2db/disconnected
    will_message: "Program mqtt2db is disconnected from broker"
    client_id: mqtt2db

=head2 Database

This section defines the database connection parameters using a mapping of scalars:

 Database:
    Driver: SQLite
    DBname: example.db
    User: ~
    Password: ~

These four options are required.

=head2 Topics

Topics are the most complex part of the configuration file. They are given as a list of hashes to improve readability. A sample definition might look like this:

 Topics:
    - Machine requests for parameters:
        topic: :area/:machine_type/:machine_id/reference/get
        SQL: >
            SELECT next_reference
            FROM   machine_state
            WHERE  machine_id = ?
        place holders:
            - machine_id
        response:
            topic: :area/:machine_type/:machine_id/reference/set
            fields:
                - next_reference

Each topic has a name (which is not used by the program), a topic, one or more SQL parameters, a list of place holders for the SQL parameters, and possibly, a response object. The functionality behind topics is hidden in the module Machine::DB::Handler.

=head3 Topic

Each topic in the configuration file needs a MQTT topic to subscribe to. This topic may include fields that need to be parsed in order to interact with the data base. These fields must be prepended with ':'. In the example above, we have the fields I<area>, I<machine_type>, and I<machine_id>. The resulting MQTT topic would be I<+/+/+/reference/get>.

The fields thus parsed are put into a hash reference, which will then be merged with the contents of the message body.

=head3 SQL Statements

There are two ways of defining the SQL messages and their place holders that process incoming MQTT messages. If there is just one SQL statement, it can be defined with the SQL key along with its place holders:

 topic: :area/:machine_type/:machine_id/reference/get
 SQL: >
    SELECT next_reference
    FROM   machine_state
    WHERE  machine_id = ?
 place holders:
    - machine_id

On the other hand, if there are multiple statements, they have to be treated differently:
 
 topic: :area/:machine_type/:machine_id/alarm/set
 SQL statements:
    - First statement description:
        SQL: >
            UPDATE machine_state
            SET    alarm = ?
            WHERE  machine_id = ?
        place holders:
            - machine_id
            - alarm
    - Second statement description:
        SQL: >
            SELECT next_reference
            FROM   machine_state
            WHERE  machine_id = ?
        place holders:
            - machine_id

In the (meaningless) example above, the I<alarm> field would come from the body of the MQTT message. SQL statements would be executed in the given order and their results (in the case of SELECT statements) would be put in the hash of fields.

=head3 Response Objects

Optionally, the program may issue a response in the form of an MQTT message. Response objects are defined like this:

 response:
    topic: "machine/:machine_id/reference/set"
    fields:
        - part_number

They only have a topic and a list of fields. The topic may contain fields, prpended with ':', whose values will be taken from the fields hash.

=head1 LICENSE

=cut
